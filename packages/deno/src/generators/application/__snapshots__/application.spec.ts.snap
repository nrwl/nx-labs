// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Deno App Generator integrated should make an integrated deno app 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "my-app",
  "projectType": "application",
  "root": "apps/my-app",
  "sourceRoot": "apps/my-app/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nx/deno:emit",
      "options": Object {
        "denoConfig": "apps/my-app/deno.json",
        "main": "apps/my-app/src/main.ts",
        "outputFile": "dist/apps/my-app/main.js",
      },
      "outputs": Array [
        "dist/apps/my-app",
      ],
    },
    "lint": Object {
      "executor": "@nx/deno:lint",
      "options": Object {
        "denoConfig": "apps/my-app/deno.json",
      },
    },
    "serve": Object {
      "executor": "@nx/deno:run",
      "options": Object {
        "buildTarget": "my-app:build",
      },
    },
    "test": Object {
      "executor": "@nx/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/apps/my-app",
        "denoConfig": "apps/my-app/deno.json",
      },
      "outputs": Array [
        "coverage/apps/my-app",
      ],
    },
  },
}
`;

exports[`Deno App Generator integrated should make an oak api with --framework=oak 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "my-oak-api",
  "projectType": "application",
  "root": "apps/my-oak-api",
  "sourceRoot": "apps/my-oak-api/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nx/deno:emit",
      "options": Object {
        "denoConfig": "apps/my-oak-api/deno.json",
        "main": "apps/my-oak-api/src/main.ts",
        "outputFile": "dist/apps/my-oak-api/main.js",
      },
      "outputs": Array [
        "dist/apps/my-oak-api",
      ],
    },
    "lint": Object {
      "executor": "@nx/deno:lint",
      "options": Object {
        "denoConfig": "apps/my-oak-api/deno.json",
      },
    },
    "serve": Object {
      "executor": "@nx/deno:run",
      "options": Object {
        "buildTarget": "my-oak-api:build",
      },
    },
    "test": Object {
      "executor": "@nx/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/apps/my-oak-api",
        "denoConfig": "apps/my-oak-api/deno.json",
      },
      "outputs": Array [
        "coverage/apps/my-oak-api",
      ],
    },
  },
}
`;

exports[`Deno App Generator integrated should make an oak api with --framework=oak 2`] = `
"import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts';

const router = new Router();

router.get('/', (ctx) => {
  ctx.response.redirect('/api');
});

router.get('/api', (ctx) => {
  ctx.response.body = { message: 'Hello my-oak-api' };
  ctx.response.type = 'text/json';
});

const app = new Application();

app.addEventListener('listen', ({ hostname, port, secure }) => {
  console.log(
    \`Listening on: \${secure ? 'https://' : 'http://'}\${
      hostname ?? 'localhost'
    }:\${port}\`
  );
});

app.use(router.routes());
app.use(router.allowedMethods());

await app
  .listen({ port: Number(Deno.env.get('PORT') || 4200) })
  .catch((err) => {
    console.error('Error serving app. Original Error:', err);
  });
"
`;

exports[`Deno App Generator standalone should make a deno app 1`] = `
Object {
  "$schema": "node_modules/nx/schemas/project-schema.json",
  "name": "my-app",
  "projectType": "application",
  "root": ".",
  "sourceRoot": "src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nx/deno:emit",
      "options": Object {
        "denoConfig": "deno.json",
        "main": "src/main.ts",
        "outputFile": "dist/my-app/main.js",
      },
      "outputs": Array [
        "dist/my-app",
      ],
    },
    "lint": Object {
      "executor": "@nx/deno:lint",
      "options": Object {
        "denoConfig": "deno.json",
      },
    },
    "serve": Object {
      "executor": "@nx/deno:run",
      "options": Object {
        "buildTarget": "my-app:build",
      },
    },
    "test": Object {
      "executor": "@nx/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/my-app",
        "denoConfig": "deno.json",
      },
      "outputs": Array [
        "coverage/my-app",
      ],
    },
  },
}
`;

exports[`Deno App Generator standalone should make an oak api with --framework=oak 1`] = `
Object {
  "$schema": "node_modules/nx/schemas/project-schema.json",
  "name": "my-oak-api",
  "projectType": "application",
  "root": ".",
  "sourceRoot": "src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nx/deno:emit",
      "options": Object {
        "denoConfig": "deno.json",
        "main": "src/main.ts",
        "outputFile": "dist/my-oak-api/main.js",
      },
      "outputs": Array [
        "dist/my-oak-api",
      ],
    },
    "lint": Object {
      "executor": "@nx/deno:lint",
      "options": Object {
        "denoConfig": "deno.json",
      },
    },
    "serve": Object {
      "executor": "@nx/deno:run",
      "options": Object {
        "buildTarget": "my-oak-api:build",
      },
    },
    "test": Object {
      "executor": "@nx/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/my-oak-api",
        "denoConfig": "deno.json",
      },
      "outputs": Array [
        "coverage/my-oak-api",
      ],
    },
  },
}
`;

exports[`Deno App Generator standalone should make an oak api with --framework=oak 2`] = `
"import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts';

const router = new Router();

router.get('/', (ctx) => {
  ctx.response.redirect('/api');
});

router.get('/api', (ctx) => {
  ctx.response.body = { message: 'Hello my-oak-api' };
  ctx.response.type = 'text/json';
});

const app = new Application();

app.addEventListener('listen', ({ hostname, port, secure }) => {
  console.log(
    \`Listening on: \${secure ? 'https://' : 'http://'}\${
      hostname ?? 'localhost'
    }:\${port}\`
  );
});

app.use(router.routes());
app.use(router.allowedMethods());

await app
  .listen({ port: Number(Deno.env.get('PORT') || 4200) })
  .catch((err) => {
    console.error('Error serving app. Original Error:', err);
  });
"
`;
