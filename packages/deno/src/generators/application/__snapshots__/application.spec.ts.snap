// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Deno App Generator integrated should create --platform=netlify integrated app 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "my-app-netlify",
  "projectType": "application",
  "root": "apps/my-app-netlify",
  "sourceRoot": "apps/my-app-netlify/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nrwl/deno:emit",
      "options": Object {
        "denoConfig": "apps/my-app-netlify/deno.json",
        "main": "apps/my-app-netlify/src/main.ts",
        "outputFile": "dist/apps/my-app-netlify/main.js",
      },
      "outputs": Array [
        "dist/apps/my-app-netlify",
      ],
    },
    "deploy": Object {
      "configurations": Object {
        "production": Object {
          "command": "yarn netlify deploy --prod",
        },
      },
      "executor": "nx:run-commands",
      "options": Object {
        "command": "yarn netlify deploy",
      },
    },
    "lint": Object {
      "executor": "@nrwl/deno:lint",
      "options": Object {
        "denoConfig": "apps/my-app-netlify/deno.json",
      },
    },
    "serve": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "yarn netlify dev",
      },
    },
    "test": Object {
      "executor": "@nrwl/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/apps/my-app-netlify",
        "denoConfig": "apps/my-app-netlify/deno.json",
      },
      "outputs": Array [
        "coverage/apps/my-app-netlify",
      ],
    },
  },
}
`;

exports[`Deno App Generator integrated should create --platform=netlify integrated app 2`] = `
"# Netlify Configuration File: https://docs.netlify.com/configure-builds/file-based-configuration
[build]
  # custom directory where edge functions are located.
  # each file in this directory will be considered a separate edge function.
  edge_functions = \\"apps/my-app-netlify/src\\"
  publish = \\"apps/my-app-netlify/src\\"

[functions]
  # provide all import aliases to netlify
  # https://docs.netlify.com/edge-functions/api/#import-maps
  deno_import_map = \\"import_map.json\\"

# Read more about declaring edge functions: 
# https://docs.netlify.com/edge-functions/declarations/#declare-edge-functions-in-netlify-toml
[[edge_functions]]
  # this is the name of the file in the edge_functions dir.
  function = \\"app\\"
  # this is the route that the edge function applies to.
  path = \\"/\\"
"
`;

exports[`Deno App Generator integrated should make an integrated deno app 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "my-app",
  "projectType": "application",
  "root": "apps/my-app",
  "sourceRoot": "apps/my-app/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nrwl/deno:emit",
      "options": Object {
        "denoConfig": "apps/my-app/deno.json",
        "main": "apps/my-app/src/main.ts",
        "outputFile": "dist/apps/my-app/main.js",
      },
      "outputs": Array [
        "dist/apps/my-app",
      ],
    },
    "lint": Object {
      "executor": "@nrwl/deno:lint",
      "options": Object {
        "denoConfig": "apps/my-app/deno.json",
      },
    },
    "serve": Object {
      "executor": "@nrwl/deno:run",
      "options": Object {
        "buildTarget": "my-app:build",
      },
    },
    "test": Object {
      "executor": "@nrwl/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/apps/my-app",
        "denoConfig": "apps/my-app/deno.json",
      },
      "outputs": Array [
        "coverage/apps/my-app",
      ],
    },
  },
}
`;

exports[`Deno App Generator integrated should make an oak api with --framework=oak 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "my-oak-api",
  "projectType": "application",
  "root": "apps/my-oak-api",
  "sourceRoot": "apps/my-oak-api/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nrwl/deno:emit",
      "options": Object {
        "denoConfig": "apps/my-oak-api/deno.json",
        "main": "apps/my-oak-api/src/main.ts",
        "outputFile": "dist/apps/my-oak-api/main.js",
      },
      "outputs": Array [
        "dist/apps/my-oak-api",
      ],
    },
    "lint": Object {
      "executor": "@nrwl/deno:lint",
      "options": Object {
        "denoConfig": "apps/my-oak-api/deno.json",
      },
    },
    "serve": Object {
      "executor": "@nrwl/deno:run",
      "options": Object {
        "buildTarget": "my-oak-api:build",
      },
    },
    "test": Object {
      "executor": "@nrwl/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/apps/my-oak-api",
        "denoConfig": "apps/my-oak-api/deno.json",
      },
      "outputs": Array [
        "coverage/apps/my-oak-api",
      ],
    },
  },
}
`;

exports[`Deno App Generator integrated should make an oak api with --framework=oak 2`] = `
"import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts';

const router = new Router();

router.get('/', (ctx) => {
  ctx.response.redirect('/api');
});

router.get('/api', (ctx) => {
  ctx.response.body = { message: 'Hello my-oak-api' };
  ctx.response.type = 'text/json';
});

const app = new Application();

app.addEventListener('listen', ({ hostname, port, secure }) => {
  console.log(
    \`Listening on: \${secure ? 'https://' : 'http://'}\${
      hostname ?? 'localhost'
    }:\${port}\`
  );
});

app.use(router.routes());
app.use(router.allowedMethods());

await app
  .listen({ port: Number(Deno.env.get('PORT') || 4200) })
  .catch((err) => {
    console.error('Error serving app. Original Error:', err);
  });
"
`;

exports[`Deno App Generator standalone should create --platform=netlify app 1`] = `
Object {
  "$schema": "node_modules/nx/schemas/project-schema.json",
  "name": "my-app-netlify",
  "projectType": "application",
  "root": ".",
  "sourceRoot": "src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nrwl/deno:emit",
      "options": Object {
        "denoConfig": "deno.json",
        "main": "src/main.ts",
        "outputFile": "dist/my-app-netlify/main.js",
      },
      "outputs": Array [
        "dist/my-app-netlify",
      ],
    },
    "deploy": Object {
      "configurations": Object {
        "production": Object {
          "command": "yarn netlify deploy --prod",
        },
      },
      "executor": "nx:run-commands",
      "options": Object {
        "command": "yarn netlify deploy",
      },
    },
    "lint": Object {
      "executor": "@nrwl/deno:lint",
      "options": Object {
        "denoConfig": "deno.json",
      },
    },
    "serve": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "yarn netlify dev",
      },
    },
    "test": Object {
      "executor": "@nrwl/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/my-app-netlify",
        "denoConfig": "deno.json",
      },
      "outputs": Array [
        "coverage/my-app-netlify",
      ],
    },
  },
}
`;

exports[`Deno App Generator standalone should create --platform=netlify app 2`] = `
"# Netlify Configuration File: https://docs.netlify.com/configure-builds/file-based-configuration
[build]
  # custom directory where edge functions are located.
  # each file in this directory will be considered a separate edge function.
  edge_functions = \\"src\\"
  publish = \\"src\\"

[functions]
  # provide all import aliases to netlify
  # https://docs.netlify.com/edge-functions/api/#import-maps
  deno_import_map = \\"import_map.json\\"

# Read more about declaring edge functions: 
# https://docs.netlify.com/edge-functions/declarations/#declare-edge-functions-in-netlify-toml
[[edge_functions]]
  # this is the name of the file in the edge_functions dir.
  function = \\"app\\"
  # this is the route that the edge function applies to.
  path = \\"/\\"
"
`;

exports[`Deno App Generator standalone should make a deno app 1`] = `
Object {
  "$schema": "node_modules/nx/schemas/project-schema.json",
  "name": "my-app",
  "projectType": "application",
  "root": ".",
  "sourceRoot": "src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nrwl/deno:emit",
      "options": Object {
        "denoConfig": "deno.json",
        "main": "src/main.ts",
        "outputFile": "dist/my-app/main.js",
      },
      "outputs": Array [
        "dist/my-app",
      ],
    },
    "lint": Object {
      "executor": "@nrwl/deno:lint",
      "options": Object {
        "denoConfig": "deno.json",
      },
    },
    "serve": Object {
      "executor": "@nrwl/deno:run",
      "options": Object {
        "buildTarget": "my-app:build",
      },
    },
    "test": Object {
      "executor": "@nrwl/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/my-app",
        "denoConfig": "deno.json",
      },
      "outputs": Array [
        "coverage/my-app",
      ],
    },
  },
}
`;

exports[`Deno App Generator standalone should make an oak api with --framework=oak 1`] = `
Object {
  "$schema": "node_modules/nx/schemas/project-schema.json",
  "name": "my-oak-api",
  "projectType": "application",
  "root": ".",
  "sourceRoot": "src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "executor": "@nrwl/deno:emit",
      "options": Object {
        "denoConfig": "deno.json",
        "main": "src/main.ts",
        "outputFile": "dist/my-oak-api/main.js",
      },
      "outputs": Array [
        "dist/my-oak-api",
      ],
    },
    "lint": Object {
      "executor": "@nrwl/deno:lint",
      "options": Object {
        "denoConfig": "deno.json",
      },
    },
    "serve": Object {
      "executor": "@nrwl/deno:run",
      "options": Object {
        "buildTarget": "my-oak-api:build",
      },
    },
    "test": Object {
      "executor": "@nrwl/deno:test",
      "options": Object {
        "coverageDirectory": "coverage/my-oak-api",
        "denoConfig": "deno.json",
      },
      "outputs": Array [
        "coverage/my-oak-api",
      ],
    },
  },
}
`;

exports[`Deno App Generator standalone should make an oak api with --framework=oak 2`] = `
"import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts';

const router = new Router();

router.get('/', (ctx) => {
  ctx.response.redirect('/api');
});

router.get('/api', (ctx) => {
  ctx.response.body = { message: 'Hello my-oak-api' };
  ctx.response.type = 'text/json';
});

const app = new Application();

app.addEventListener('listen', ({ hostname, port, secure }) => {
  console.log(
    \`Listening on: \${secure ? 'https://' : 'http://'}\${
      hostname ?? 'localhost'
    }:\${port}\`
  );
});

app.use(router.routes());
app.use(router.allowedMethods());

await app
  .listen({ port: Number(Deno.env.get('PORT') || 4200) })
  .catch((err) => {
    console.error('Error serving app. Original Error:', err);
  });
"
`;
